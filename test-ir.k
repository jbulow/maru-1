(require "ir.k")

(let ((ir (ir-new ())))
;;   (ir-define ir 'bar IR-INT32 (leaf <ir-lit> IR-INT32 42))
;;   (ir-define ir 'foo IR-INT32 (ir-get 'bar))
;;   (ir-define ir 'qux IR-FLOAT (insn <ir-neg>	(leaf <ir-lit> IR-FLOAT 3.14)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-com>	(leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-not>	(leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-add>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-sub>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-mul>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-div>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-mod>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-shl>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 4 )))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-shr>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 4 )))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-bitand> (leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-bitor>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-bitxor> (leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-lt>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-le>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-eq>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-ne>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-ge>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-gt>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-logand> (leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-define ir 'baz IR-INT32 (insn <ir-logor>	(leaf <ir-lit> IR-INT32 42) (leaf <ir-lit> IR-INT32 42)))
;;   (ir-put ir (ir-cvt IR-INT (leaf <ir-lit> IR-FLOAT 3.14)))
;;   (ir-put ir (insn <ir-while> (leaf <ir-lit> IR-INT 1)
;; 		      (insn <ir-if> (leaf <ir-lit> IR-INT 2)
;; 			    (leaf <ir-lit> IR-INT 3)
;; 			    (insn <ir-seq>
;; 				  (leaf <ir-lit> IR-INT32 42)))))
;;  (ir-put ir (insn <ir-seq> (ir-var 'foo IR-FLOAT (leaf <ir-lit> IR-FLOAT 4.2))))
;;   (ir-put ir (ir-fun 'aFunction ()
;; 			(ir-arg 'foo IR-INT)
;; 			(ir-arg 'bar IR-FLOAT)
;; 			(ir-var 'baz IR-INT (leaf <ir-lit> 0))
;; 			(ir-set 'baz (insn <ir-add> (ir-get 'foo) (ir-get 'baz)))))
;;   (ir-put ir (ir-def 'vFunction () (ir-get 'aFunction)))
;;   (ir-put ir (ir-call (ir-get 'aFunction) (ir-lit 42) (ir-lit 3.14)))
;;   (ir-put ir (ir-call (ir-get 'vFunction) (ir-lit 42) (ir-lit 3.14)))
;;   (ir-put ir (ir-def 'xFunction ()
;; 			(ir-fun () ()
;; 				(ir-arg 'foo IR-INT)
;; 				(ir-arg 'bar IR-FLOAT)
;; 				(ir-var 'baz IR-INT (leaf <ir-lit> 0))
;; 				(ir-set 'baz (insn <ir-add> (ir-get 'foo) (ir-get 'baz))))))
;;   (ir-put ir (ir-call (ir-get 'xFunction) (ir-lit 42) (ir-lit 3.14)))

;;   (ir-put ir
;;     (ir-fun 'nfibs (ir-function-type ir IR-INT IR-INT)
;; 	    (ir-arg 'n IR-INT)
;; 	    (ir-ret (ir-if (ir-lt (ir-get 'n) (ir-lit 2))
;; 			   (ir-lit 1)
;; 			   (ir-add (ir-add (ir-call (ir-get 'nfibs) (ir-sub (ir-get 'n) (ir-lit 1)))
;; 					   (ir-call (ir-get 'nfibs) (ir-sub (ir-get 'n) (ir-lit 2))))
;; 				   (ir-lit 1)))))
;;     (ir-ext 'printf (ir-function-type ir IR-INT) "stdio.h")
;;     (ir-call (ir-get 'printf) (ir-lit "%d\n") (ir-call (ir-get 'nfibs) (ir-lit 5))))
;;   (ir-put ir (ir-set (ir-lit "hello") (ir-get (ir-lit "jello"))))

  (ir-def-struct ir 'Point (list IR-INT 'x 'y))

  (ir-put ir
    (ir-def 'point (ir-struct-type ir 'Point) (ir-struct 'Point (ir-lit 42) (ir-lit 666)))
    (ir-ext 'printf (ir-function-type ir IR-INT))
    (ir-fun 'doit (ir-function-type ir IR-VOID (ir-struct-type ir 'Point))
	    (ir-arg 'p (ir-struct-type ir 'Point))
	    (ir-call (ir-get 'printf) (ir-lit "%d %d\n")
		     (ir-get (ir-member 'x (ir-addr 'p)))
		     (ir-get (ir-member 'y (ir-addr 'p)))))
    (ir-call (ir-get 'doit) (ir-get 'point))
    )

  (ir-gen-main ir)
  )
