(define-structure <header> (size flags next))

(compile-begin)

(define exit	(extern 'exit))
(define malloc	(extern 'malloc))
(define memset	(extern 'memset))
(define printf	(extern 'printf))

(define gc_quantum 2048)

(define gc_memory_base 0)
(define gc_memory_last 0)

(define-form size-of-structure (type)	(* 4 (array-at %structure-sizes (eval type))))

(define-form <header>-flags-used ()	1)

(define-function max (a b)	(if (> a b) a b))

(define-function new_memory_block (size)
  (let ((ptr (malloc size)))
    (or ptr
	(let ()
	  (printf "out of memory\n")
	  (exit 1)))
    (set (<header>-size  ptr) (- size (size-of-structure <header>)))
    (set (<header>-flags ptr) 0)
    (set (<header>-next  ptr) ptr)
    (printf "BRK %p %d\n" ptr size)
    ptr))

(define-function init_memory (size)
  (let ((ptr (new_memory_block size)))
    (set gc_memory_base ptr)
    (set gc_memory_last ptr)))

(define-function gc_malloc_chunk (size)
  (let ((ptr   (<header>-next gc_memory_last))
	(done  ())
	(chunk ()))
    (while (not done)
      ;;(printf "? %p %p %d %d\n" ptr (<header>-next ptr) (<header>-flags ptr) (<header>-size ptr))
      (if (and (=  0    (<header>-flags ptr))
	       (<= size (<header>-size  ptr)))
	  (let ()
	    (set chunk ptr)
	    (set done 1))
	(set done (= gc_memory_last (set ptr (<header>-next ptr))))))
    ;;(printf "gc_malloc_chunk found free %p\n" chunk)
    (if chunk
	(let ((csize (<header>-size chunk)))
	  ;;(printf "CSIZE %d\n" csize)
	  (and (> csize (+ size (size-of-structure <header>)))
	       (let ((split (+ chunk (+ (size-of-structure <header>) size))))
		 ;;(printf "SPLIT %p\n" split)
		 (set (<header>-size  split) (- csize (+ size (size-of-structure <header>))))
		 (set (<header>-flags split) 0)
		 (set (<header>-next  split) (<header>-next chunk))
		 (set (<header>-size  chunk) size)
		 (set (<header>-next  chunk) split)))
	  (set (<header>-flags chunk) (<header>-flags-used))
	  (set gc_memory_last chunk)
	  ;;(printf "ALLOC CHUNK %p\n" chunk)
	  (let ((obj (+ chunk (size-of-structure <header>))))
	    (memset obj 0 size)
	    obj)))))

(define-function gc_gcollect ()
  (let ((ptr gc_memory_base))
    (while ptr
      (gc_mark_and_trace ptr)
      (set ptr (<header>-next ptr))
      (if (= gc_memory_base ptr) (set ptr 0))))
  (let ((ptr gc_memory_base))
    (while ptr
      (if (= 0 (& (<header>-flags ptr) (<header>-flags-mark)))
	  (gc_free ptr)
	    
	    (while (and (= 0 (& (<header>-flags ptr) (<header>-flags-mark)))
      (gc_mark_and_trace ptr)
      (set ptr (<header>-next ptr))
      (if (= gc_memory_base ptr) (set ptr 0))))
  
  (printf "GC\n"))

(define-function gc_malloc (size)
  (set size (& -4 (+ 3 size)))
  (or (gc_malloc_chunk size)
      (let ()
	(gc_gcollect)
	(gc_malloc_chunk size)
	(let ((brk (new_memory_block (max (+ (size-of-structure <header>) size) gc_quantum))))
	  (set (<header>-next brk)            (<header>-next gc_memory_last))
	  (set (<header>-next gc_memory_last) brk)
	  (gc_malloc_chunk size)))
      (let ()
	(printf "internal error: failed to allocate object after growing memory\n")
	(exit 1))))

(define-function main ()
  (init_memory gc_quantum)
  (printf "%p\n" gc_memory_base)
  (printf "%x\n" (<header>-size  gc_memory_base))
  (printf "%x\n" (<header>-flags gc_memory_base))
  (printf "%p\n" (<header>-next  gc_memory_base))
  (printf "%p\n" (gc_malloc 8))
  (printf "%p\n" (gc_malloc 8))
  (printf "%p\n" (gc_malloc 8))
  (printf "%p\n" (gc_malloc 8))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  (printf "%p\n" (gc_malloc 1012))
  0
  )

(compile-end)
