(load "port.l")
(load "data-stream.k")
(load "ansiterm.l")

(define-function nth (n list)
  (while (and (pair? list) (>= (incr n -1) 0))
    (set list (cdr list)))
  (car list))

(define-function %receive (vars)
  (and (pair? vars)
       (cons `(set ,(car vars) (car _))
	     (cons '(set _ (cdr _))
		   (%receive (cdr vars))))))

(define-form receive (expr . vars)
  `(let ((_ ,expr))
     ,@(%receive vars)))

(define values list)

(define-function _B (d x)	(data-stream-put-byte d x))
(define-function _W (d x)	(_B d x) (_B d (>> x 8)))
(define-function _L (d x)	(_W d x) (_W d (>> x 16)))

(define-function _D1 (d x)	(error "D1 "x))
(define-function _D4 (d x)	(error "D4 "x))

(load "asm-x86.k")

(define-form getB (d)	'(data-stream-get-byte d))
(define-form getL (d)	'(let ((a (getB d)) (b (getB d)) (c (getB d)) (d (getB d)))  (+ a (+ (<< b 8) (+ (<< c 16) (<< d 24))))))

(load "dsm-x86.k")

(define %EAX 0x40)
(define %ECX 0x41)
(define %EDX 0x42)
(define %EBX 0x43)
(define %ESP 0x44)
(define %EBP 0x45)
(define %ESI 0x46)
(define %EDI 0x47)

(let ((x (data-stream)))
  (PUSHLr x %EBP)
  (MOVLrr x %ESP 	%EBP)
  (SUBLir x  8   	%ESP)
  (XORLrr x %EAX 	%EAX)
  (ADDLmr x  8 %EBP 0 0 %EAX)
  (ADDLmr x 12 %EBP 0 0 %EAX)
  (LEAVE  x)
  (RET    x)
  (println (data-stream-position x)" bytes generated")
  (data-stream-truncate x)
  (data-stream-rewind x)
  (let ((p (console-port)))
    (while (not (data-stream-at-end? x))
      (port-write p (format "%08x"(data-stream-position x))"\t")
      (disassemble-on x p)
      (port-put p ?\n)))
  (println (call (data-stream-data x) 3 4))
  )
