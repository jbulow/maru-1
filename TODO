make lambda() and let() construct and save a new env to their encoded form
	lambda increments the env level
	let does not increment the env level

add Context to eval.c
	newContext
	doprint

make eval/apply use it

propagate type changes to boot.l, eval.l

change eval.l to use contexts

optimise eval.c for
	size check on invocation
	cached allocation behavior - dlist

propagate type changes to boot.l, eval.l

optimise eval.l

----------------------------------------------------------------

use Context instead of Env to store locals in eval
	then re-sync eval.l

make encode rewrite r-value variables as the value when value is subr

encode variables as
	direct read/write on GLOBAL var object, or
	indirect read/write on LOCAL var object as level + offset

----------------------------------------------------------------

split <ptr> type from <long>.

port streams.

port PEG.
