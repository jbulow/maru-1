(require "ir2.k")

(define *ir-gen-c-main* ())
(define *ir-gen-c-init* ())

(define-function c-mangle (s)
  (let* ((in  (symbol->string s))
	 (len (string-length in))
	 (out (array)))
    (for (i 0 len)
      (let ((c (string-at in i)))
	(if (or (and (<= 0x61 c) (<= c 0x7a))
		(and (<= 0x40 c) (<= c 0x5a))
		(and (<= 0x30 c) (<= c 0x39)))
	    (array-append out c)
	  (if (= ?_ c)
	      (array-append-all out "__")
	    (array-append-all out (format "_%02x" c))))))
    (array->string out)))

(define-function ir-gen-c-variable-name (name)	(concat-string "v_" (c-mangle (symbol->string name))))

(define-function ir-gen-c-function-name (fun)
  (let ((name (<ir-function>-export fun)))
    (if name
	(if (= name 'main)
	    'f_main
	  (symbol->string name))
      (concat-string "f_" (c-mangle (symbol->string (car (<ir-function>-parameters fun))))))))

(define-method print-c-declaration <ir-type> (name)		(error "missing implementation: print-c-declaration "(type-name-of self)))

(define-method print-c-declaration <ir-void-type>    	(name)	(print "void") (and name (print " "name)))

(define-method print-c-declaration <ir-integral-type> (name)
  (cond
    ((= 1 self.size)	(print "char"))
    ((= 2 self.size)	(print "int16_t"))
    ((= 4 self.size)	(print "int32_t"))
    ((= 8 self.size)	(print "int64_t"))
    (else		(error "illegal integer size: "self.size)))
  (and name (print " "name)))

(define-method print-c-declaration <ir-floating-type> (name)
  (cond
    ((= 4 self.size)	(print "float"))
    ((= 8 self.size)	(print "double"))
    (else		(error "illegal float size: "self.size)))
  (and name (print " "name)))

(define-method print-c-declaration <ir-varargs-type>  (name)	(print "..."))

(define-method print-c-declaration <ir-pointer-type>  (name)
  (print-c-declaration self.referent (concat-string "*" (or (and name (symbol->string name))  ""))))

(define-method print-c-declaration <ir-function-type> (name)
  (print-c-declaration self.ret-type (concat-strings "("name")"))
  (print "(")
  (let ((args self.arg-types))
    (unless (= IR-VARARGS (car args))
      (while (pair? args)
	(print-c-declaration (car args) ())
	(and (pair? (set args (cdr args))) (print ", ")))))
  (print ")")
  )

(define-method print-c-declaration <ir-struct-type> (name)
  (print "struct "(c-mangle self.name))
  (and name (print " "name)))

(define-method print-c-declaration <ir-label-type> (name)
  (print "void *"(c-mangle self.name))
  (and name (print " "name)))

;

(define-function ir-gen-output (gen))

(define-structure <ir-gen-c> (indent))

(define-function ir-gen-new ()					(new <ir-gen-c> 0))

(define-function ir-gen-c-bol (gen)				(for (i 0 (<ir-gen-c>-indent gen)) (print "  ")))
(define-function ir-gen-c-eol (gen)				(println ";"))

(define-function ir-gen-c-begin (gen)
  (ir-gen-c-bol gen)
  (println "{")
  (incr (<ir-gen-c>-indent gen)))

(define-function ir-gen-c-end (gen)
  (decr (<ir-gen-c>-indent gen))
  (ir-gen-c-bol gen)
  (println "}"))

(define-method ir-gen-declare-struct <ir-gen-c> (struct)
  (println "struct "(c-mangle (<ir-struct-type>-name struct))" {")
  (list-do bind (<ir-struct-type>-members struct)
    (let ((member (cdr bind)))
      (print "  ")
      (print-c-declaration (<ir-struct-member>-type member) (symbol->string (<ir-struct-member>-name member)))
      (println ";")))
  (println "};"))

(define-method ir-gen-global-declaration <ir-gen-c> (var)
  (let ((name (<ir-global>-name var)))
    (print-c-declaration (<ir-global>-type var) (ir-gen-c-variable-name name))
    (println ";")))

(define-method ir-gen-local-declaration <ir-gen-c> (var)
  (ir-gen-c-bol self)
  (print-c-declaration (<ir-local>-type var) (ir-gen-c-variable-name (<ir-local>-name var)))
  (ir-gen-c-eol self))

;

(define-method ir-gen-c <ir-member> (gen)
  (let* ((field (car self.parameters))
	 (fname (<ir-struct-member>-name field))
	 (value (car self.operands))
	 (type  (<ir-insn>-type value)))
    (cond
      ((ir-pointer-type? type)	(print "(")  (ir-gen-c value gen)  (print "->"fname")"))
      ((ir-struct-type? type)	(print "(")  (ir-gen-c value gen)  (print  "."fname")"))
      (else			(error "this cannot happen")))))

(define-method ir-gen-c <ir-set-member> (gen)
  (let* ((field (car self.parameters))
	 (fname (<ir-struct-member>-name field))
	 (value (car self.operands))
	 (init  (cadr self.operands))
	 (type  (<ir-insn>-type value)))
    (cond
      ((ir-pointer-type? type)	(print "(")  (ir-gen-c value gen)  (print "->"fname"=")  (ir-gen-c init gen)  (print ")"))
      ((ir-struct-type? type)	(print "(")  (ir-gen-c value gen)  (print  "."fname"=")  (ir-gen-c init gen)  (print ")"))
      (else			(error "this cannot happen")))))

(define-method ir-gen-c <ir-indir> (gen)
  (print "(")  (ir-gen-c (car  self.operands) gen)
  (print "[")  (ir-gen-c (cadr self.operands) gen)
  (print "])"))

(define-method ir-gen-c <ir-set-indir> (gen)
  (print "((")  (ir-gen-c (car   self.operands) gen)
  (print ")[")  (ir-gen-c (cadr  self.operands) gen)
  (print "]=(") (ir-gen-c (caddr self.operands) gen)
  (print "))"))

(define-method ir-gen-c <ir-get-var> (gen)
  (and (ir-label-var? self.parameters) (print "&&"))
  (print (ir-gen-c-variable-name (<ir-variable>-name self.parameters))))

(define-method ir-gen-c <ir-set-var> (gen)
  (let ((var   self.parameters)
	(value (car self.operands)))
    (unless (= 'main (<ir-variable>-name var))
      (print "("(ir-gen-c-variable-name (<ir-variable>-name var))"=")
      (ir-gen-c value gen)
      (print ")"))))

(define-method ir-gen-c <ir-nop>	  (gen)	())
(define-method ir-gen-c <ir-define>	  (gen)	(ir-gen-c (car self.operands) gen))
(define-method ir-gen-c <ir-define-label> (gen)	(print (ir-gen-c-variable-name (symbol->string (car self.parameters))) ":"))

(define-method ir-gen-c <ir-goto> (gen)
  (if (ir-label-expression? (car self.operands))
	;;; (print "goto v_"(<ir-variable>-name (<ir-get-var>-parameters (car self.operands))))
      (print "goto "(ir-gen-c-variable-name (<ir-variable>-name (<ir-get-var>-parameters (car self.operands)))))
    (print "goto *(")
    (ir-gen-c (car self.operands) gen)
    (print ")")))

(define-method ir-gen-c <ir-addressof>	  (gen)	(print "&") (ir-gen-c (car self.operands) gen))
(define-method ir-gen-c <ir-lit>	  (gen)	(dump (car self.parameters)))
(define-method ir-gen-c <ir-extern>	  (gen)	(print "dlsym(RTLD_DEFAULT, ")  (dump (symbol->string (car self.parameters)))  (print ")"))
(define-method ir-gen-c <ir-function>	  (gen)	(print (ir-gen-c-function-name self)))

(define-method ir-gen-c <ir-cast> (gen)
  (print "((")
  (print-c-declaration (car self.parameters) ())
  (print ")(")
  (ir-gen-c (car self.operands) self)
  (print "))"))

(define-function ir-gen-c-unary (insn op gen)
  (let* ((type (<ir-insn>-type insn))
	 (opd  (car (<ir-insn>-operands insn))))
    (print "("op"((")
    (print-c-declaration type ())    ;;(print-c-declaration (car self.type) ())
    (print ")(")
    (ir-gen-c opd gen)
    (print ")))")))

(define-method ir-gen-c <ir-neg>    (gen)	(ir-gen-c-unary self '- (car self.operands)))
(define-method ir-gen-c <ir-com>    (gen)	(ir-gen-c-unary self '~ (car self.operands)))
(define-method ir-gen-c <ir-not>    (gen)	(ir-gen-c-unary self '! (car self.operands)))

(define-function ir-gen-c-binary (insn op gen)
  (let* ((type (<ir-insn>-type insn))
	 (opds (<ir-insn>-operands insn))
	 (lhs  (car  opds))  (lptr? (ir-pointer-type? (<ir-insn>-type lhs)))
	 (rhs  (cadr opds))  (rptr? (ir-pointer-type? (<ir-insn>-type rhs))))
    (print "((") (print-c-declaration type ()) (print ")((")
    (and lptr? (print "(void *)"))
    (ir-gen-c (car  (<ir-insn>-operands insn)) gen)
    (print ")"op"(")
    (and rptr? (print "(void *)"))
    (ir-gen-c (cadr (<ir-insn>-operands insn)) gen)
    (print ")))")))

(define-method ir-gen-c <ir-add>    (gen)	(ir-gen-c-binary self '+  gen))
(define-method ir-gen-c <ir-sub>    (gen)	(ir-gen-c-binary self '-  gen))
(define-method ir-gen-c <ir-mul>    (gen)	(ir-gen-c-binary self '*  gen))
(define-method ir-gen-c <ir-div>    (gen)	(ir-gen-c-binary self '/  gen))
(define-method ir-gen-c <ir-mod>    (gen)	(ir-gen-c-binary self '%  gen))
(define-method ir-gen-c <ir-bitand> (gen)	(ir-gen-c-binary self '&  gen))
(define-method ir-gen-c <ir-bitor>  (gen)	(ir-gen-c-binary self '|  gen))
(define-method ir-gen-c <ir-bitxor> (gen)	(ir-gen-c-binary self '^  gen))
(define-method ir-gen-c <ir-shl>    (gen)	(ir-gen-c-binary self '<< gen))
(define-method ir-gen-c <ir-shr>    (gen)	(ir-gen-c-binary self '>> gen))
(define-method ir-gen-c <ir-eq>     (gen)	(ir-gen-c-binary self '== gen))
(define-method ir-gen-c <ir-ne>     (gen)	(ir-gen-c-binary self '!= gen))
(define-method ir-gen-c <ir-lt>     (gen)	(ir-gen-c-binary self '<  gen))
(define-method ir-gen-c <ir-le>     (gen)	(ir-gen-c-binary self '<= gen))
(define-method ir-gen-c <ir-ge>     (gen)	(ir-gen-c-binary self '>= gen))
(define-method ir-gen-c <ir-gt>     (gen)	(ir-gen-c-binary self '>  gen))

(define-function ir-gen-c-logical (gen type values op neg)
  (if (= IR-VOID type)
      (let ()
	(print "if (")
	(and neg (print "!("))
	(while (cdr values)
	  (ir-gen-c (car values) gen)
	  (and (cdr (set values (cdr values)))
	       (print " "op" ")))
	(and neg (print ")"))
	(print ") ")
	(ir-gen-c (car values) gen))
    (print "(")
    (while values
      (ir-gen-c (car values) gen)
      (if (set values (cdr values))
	  (print " "op" ")))
    (print ")")))

(define-method ir-gen-c <ir-logand> (gen)	(ir-gen-c-logical gen self.type self.operands "&&" ()))
(define-method ir-gen-c <ir-logor>  (gen)	(ir-gen-c-logical gen self.type self.operands "||" 1 ))

;; (define-method ir-gen-c <ir-seq> (gen)
;;   (let ((bindings self.parameters)
;; 	(exprs    self.operands))
;;     (ir-gen-c-begin  gen)
;;     (list-do name-var bindings (ir-gen-local-declaration (cdr name-var) gen))
;;     (list-do expr exprs
;;       (ir-gen-c-bol  gen)
;;       (ir-gen-c expr gen)
;;       (ir-gen-c-eol  gen))
;;     (ir-gen-c-end    gen)))

(define-method ir-gen-c <ir-let> (gen) ;			(ir-gen-let gen self.type self.parameters self.operands))
  (and (!= IR-VOID self.type) (print "("))
  (ir-gen-c-begin gen)
  (list-do name-var self.parameters (ir-gen-local-declaration (cdr name-var) gen))
  (list-do expr self.operands
    (ir-gen-c-bol  gen)
    (ir-gen-c expr gen)
    (ir-gen-c-eol  gen))
  (ir-gen-c-end gen)
  (and (!= IR-VOID self.type) (print ")")))

(define-method ir-gen-c <ir-if> (gen)
  (let ((test (car   self.operands))
	(exp  (cadr  self.operands))
	(alt  (caddr self.operands)))
    (if (= self.type IR-VOID)
	(let ()
	  (print "if (")	(ir-gen-c test gen)  (println ")")
	  (ir-gen-c-begin gen)	(ir-gen-c exp  gen)  (ir-gen-c-eol gen)  (ir-gen-c-end gen)
	  (ir-gen-c-bol   gen)	(println "else")
	  (ir-gen-c-begin gen)	(ir-gen-c alt  gen)  (ir-gen-c-eol gen)  (ir-gen-c-end gen))
      (print "(")  (ir-gen-c test gen)
      (print "?")  (ir-gen-c exp  gen)
      (print ":")  (ir-gen-c alt  gen)  (print ")"))))

(define-method ir-gen-c <ir-while> (gen)
  (let ((test (car  self.operands))
	(expr (cadr self.operands)))
    (print "while (")  (ir-gen-c test gen)  (println ")")
    (ir-gen-c-begin gen)
    (ir-gen-c expr  gen)
    (ir-gen-c-eol   gen)
    (ir-gen-c-end   gen)))

(define-method ir-gen-function-implementation <ir-gen-c> (value)
  (let ((name (car  (<ir-function>-parameters value)))
	(type (<ir-pointer-type>-referent (<ir-function>-type value)))
	(args (cadr (<ir-function>-parameters value)))
	(body (<ir-function>-operands value)))
    (and (= 'main name) (set *ir-gen-c-main* name))
    (or (<ir-function>-export value) (print "static "))
    (print-c-declaration (<ir-function-type>-ret-type type) (ir-gen-c-function-name value))
    (print "(")
    (let ((argn args)
	  (argt (<ir-function-type>-arg-types type)))
      (unless (= IR-VARARGS (car argt))
	(while (pair? argn)
	  (print-c-declaration (car argt) (ir-gen-c-variable-name (symbol->string (car argn))))
	  (set argt (cdr argt))
	  (and (pair? (set argn (cdr argn))) (print ", ")))))
    (println ")")
    (ir-gen-c-begin self)
    (list-do insn body
      (ir-gen-c-bol self)
      (ir-gen-c insn self)
      (ir-gen-c-eol self))
    (ir-gen-c-end self)))

(define-method ir-gen-c <ir-call> (gen)
  (print "(")
  (ir-gen-c (car self.operands) self)
  (print ")(")
  (let ((args (cdr self.operands)))
    (while (pair? args)
      (ir-gen-c (car args) gen)
      (and (pair? (set args (cdr args))) (print ", "))))
  (print ")"))

(define-method ir-gen-c <ir-return> (gen)
  (print "return ")
  (ir-gen-c (car self.operands) self))

(define-method ir-gen-header <ir-gen-c> ()
  (println "#include <stdint.h>")
  (println "#define __USE_GNU")
  (println "#include <dlfcn.h>"))

(define-method ir-gen-preamble <ir-gen-c> ()
  (cond
    (*ir-gen-c-main*	(println "int main(int argc, char **argv)")	(ir-gen-c-begin self))
    (*ir-gen-c-init*	(println "static void _init(void)")		(ir-gen-c-begin self))))

(define-method ir-gen-initialisation <ir-gen-c> (value)
  (if *ir-gen-c-main*
      (let ()
	(ir-gen-c-bol   self)
	(ir-gen-c value self)
	(ir-gen-c-eol   self))
    (let* ((setter (car (<ir-define>-operands value)))
	   (var    (<ir-set-var>-parameters setter))
	   (name   (<ir-global>-name var))
	   (type   (<ir-global>-type var))
	   (init   (car (<ir-set-var>-operands setter)))
	   (kind   (type-of init)))
      (cond
	((= kind <ir-extern>)	(print "extern ") (print-c-declaration (<ir-pointer-type>-referent type) (symbol->string name)) (println ";")
				(print-c-declaration type (ir-gen-c-variable-name name))
				(println " = "name";"))
	((= kind <ir-function>)	(print-c-declaration type (ir-gen-c-variable-name name))
				(print " = ")
				(print (ir-gen-c-function-name init))
				(println ";"))
	(else			(error "cannot initialise: "name" with: "value)))
;    (println ";")))
      )))

(define-function ir-gen-c-variable-name (name)	(concat-string "v_" (c-mangle (symbol->string name))))

(define-method ir-gen-postamble <ir-gen-c> ()
  (cond
    (*ir-gen-c-main*	(ir-gen-c-bol self)    (print "f_main(argc, argv)")	(ir-gen-c-eol self)
			(ir-gen-c-bol self)    (print "return 0")		(ir-gen-c-eol self)
			(ir-gen-c-end self))
    (*ir-gen-c-init*	(ir-gen-c-end self))))
