(require "ir2.k")

(define *ir-gen-c-main* ())
(define *ir-gen-c-init* ())

(define-function c-mangle (s)
  (let* ((in  (symbol->string s))
	 (len (string-length in))
	 (out (array)))
    (for (i 0 len)
      (let ((c (string-at in i)))
	(if (or (and (<= 0x61 c) (<= c 0x7a))
		(and (<= 0x40 c) (<= c 0x5a))
		(and (<= 0x30 c) (<= c 0x39)))
	    (array-append out c)
	  (if (= ?_ c)
	      (array-append-all out "__")
	    (array-append-all out (format "_%02x" c))))))
    (array->string out)))

(define-function ir-gen-c-variable-name (name)	(concat-string "v_" (c-mangle (symbol->string name))))

(define-function ir-gen-c-function-name (fun)
  (let ((name (<ir-function>-export fun)))
    (if name (symbol->string name)
      (concat-string "f_" (c-mangle (symbol->string (car (<ir-function>-parameters fun))))))))

(define-method print-c-declaration <ir-type> (name)		(error "missing implementation: print-c-declaration "(type-name-of self)))

(define-method print-c-declaration <ir-void-type>    	(name)	(print "void") (and name (print " "name)))

(define-method print-c-declaration <ir-integral-type> (name)
  (cond
    ((= 1 self.size)	(print "char"))
    ((= 2 self.size)	(print "int16_t"))
    ((= 4 self.size)	(print "int32_t"))
    ((= 8 self.size)	(print "int64_t"))
    (else		(error "illegal integer size: "self.size)))
  (and name (print " "name)))

(define-method print-c-declaration <ir-floating-type> (name)
  (cond
    ((= 4 self.size)	(print "float"))
    ((= 8 self.size)	(print "double"))
    (else		(error "illegal float size: "self.size)))
  (and name (print " "name)))

(define-method print-c-declaration <ir-varargs-type>  (name)	(print "..."))

(define-method print-c-declaration <ir-pointer-type>  (name)
  (print-c-declaration self.referent (concat-string "*" (or (and name (symbol->string name))  ""))))

(define-method print-c-declaration <ir-function-type> (name)
  (print-c-declaration self.ret-type (concat-strings "("name")"))
  (print "(")
  (let ((args self.arg-types))
    (unless (= IR-VARARGS (car args))
      (while (pair? args)
	(print-c-declaration (car args) ())
	(and (pair? (set args (cdr args))) (print ", ")))))
  (print ")")
  )

(define-method print-c-declaration <ir-struct-type> (name)
  (print "struct "(c-mangle self.name))
  (and name (print " "name)))

;

(define-structure <ir-gen-c> (indent))

(define-function ir-gen-new ()					(new <ir-gen-c> 0))

(define-function ir-gen-c-bol (gen)				(for (i 0 (<ir-gen-c>-indent gen)) (print "  ")))
(define-function ir-gen-c-eol (gen)				(println ";"))

(define-function ir-gen-c-begin (gen)
  (ir-gen-c-bol gen)
  (println "{")
  (incr (<ir-gen-c>-indent gen)))

(define-function ir-gen-c-end (gen)
  (decr (<ir-gen-c>-indent gen))
  (ir-gen-c-bol gen)
  (println "}"))

(define-method ir-gen-declare-struct <ir-gen-c> (struct)
  (println "struct "(c-mangle (<ir-struct-type>-name struct))" {")
  (list-do bind (<ir-struct-type>-members struct)
    (let ((member (cdr bind)))
      (print "  ")
      (print-c-declaration (<ir-struct-member>-type member) (symbol->string (<ir-struct-member>-name member)))
      (println ";")))
  (println "};"))

(define-method ir-gen-global-declaration <ir-gen-c> (var)
  (let ((name (<ir-global>-name var)))
    (print-c-declaration (<ir-global>-type var) (ir-gen-c-variable-name name))
    (println ";")))

(define-method ir-gen-local-declaration <ir-gen-c> (var)
  (ir-gen-c-bol self)
  (print-c-declaration (<ir-local>-type var) (ir-gen-c-variable-name (<ir-local>-name var)))
  (ir-gen-c-eol self))

(define-method ir-gen-member <ir-gen-c> (field value)
  (let ((type (<ir-insn>-type value)))
    (cond
      ((ir-pointer-type? type)	(print "(")  (ir-gen value self)  (print "->"field")"))
      ((ir-struct-type? type)	(print "(")  (ir-gen value self)  (print  "."field")"))
      (else			(error "this cannot happen")))))

(define-method ir-gen-set-member <ir-gen-c> (field value init)
  (let ((type (<ir-insn>-type value)))
    (cond
      ((ir-pointer-type? type)	(print "(")  (ir-gen value self)  (print "->"field"=")  (ir-gen init self)  (print ")"))
      ((ir-struct-type? type)	(print "(")  (ir-gen value self)  (print  "."field"=")  (ir-gen init self)  (print ")"))
      (else			(error "this cannot happen")))))

(define-method ir-gen-indir <ir-gen-c> (type base index)
  (print "(")
  (ir-gen base self)
  (print "[")
  (ir-gen index self)
  (print "])"))

(define-method ir-gen-set-indir <ir-gen-c> (type base index value)
  (print "(")
  (ir-gen base self)
  (print "[")
  (ir-gen index self)
  (print "]=")
  (ir-gen value self)
  (print ")"))

(define-method ir-gen-get-var <ir-gen-c> (var)
  (print (ir-gen-c-variable-name (<ir-variable>-name var))))

(define-method ir-gen-set-var <ir-gen-c> (var value)
  (unless (= 'main (<ir-variable>-name var))
    (print "("(ir-gen-c-variable-name (<ir-variable>-name var))"=")
    (ir-gen value self)
    (print ")")))

(define-method ir-gen-sizeof <ir-gen-c> (type)			(print (<ir-type>-size type)))
(define-method ir-gen-addressof-var <ir-gen-c> (var)		(print "&") (ir-gen-get-var self var))
(define-method ir-gen-addressof-member <ir-gen-c> (field value)	(print "&") (ir-gen-member field value))
(define-method ir-gen-lit <ir-gen-c> (value)			(dump value))

(define-method ir-gen-cast <ir-gen-c> (to value)
  (print "((")
  (print-c-declaration to ())
  (print ")(")
  (ir-gen value self)
  (print "))"))

(define-method ir-gen-nop <ir-gen-c> ())

(define-function ir-gen-c-unary (self op arg)
  (print "("op)
  (ir-gen arg self)
  (print ")"))

(define-method ir-gen-neg <ir-gen-c> (arg)	(ir-gen-c-unary self '- arg))
(define-method ir-gen-com <ir-gen-c> (arg)	(ir-gen-c-unary self '~ arg))
(define-method ir-gen-not <ir-gen-c> (arg)	(ir-gen-c-unary self '! arg))

(define-function ir-gen-c-binary (self op lhs rhs)
  (print "(")
  (ir-gen lhs self)
  (print op)
  (ir-gen rhs self)
  (print ")"))

(define-method ir-gen-add    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '+  lhs rhs))
(define-method ir-gen-sub    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '-  lhs rhs))
(define-method ir-gen-mul    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '*  lhs rhs))
(define-method ir-gen-div    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '/  lhs rhs))
(define-method ir-gen-mod    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '%  lhs rhs))
(define-method ir-gen-lt     <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '<  lhs rhs))
(define-method ir-gen-le     <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '<= lhs rhs))
(define-method ir-gen-eq     <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '== lhs rhs))
(define-method ir-gen-ne     <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '!= lhs rhs))
(define-method ir-gen-ge     <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '>= lhs rhs))
(define-method ir-gen-gt     <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '>  lhs rhs))
(define-method ir-gen-shl    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '<< lhs rhs))
(define-method ir-gen-shr    <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '>> lhs rhs))
(define-method ir-gen-bitand <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '&  lhs rhs))
(define-method ir-gen-bitor  <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '|  lhs rhs))
(define-method ir-gen-bitxor <ir-gen-c> (lhs rhs)	(ir-gen-c-binary self '^  lhs rhs))

(define-function ir-gen-c-logical (self type values op neg)
  (if (= IR-VOID type)
      (let ()
	(print "if (")
	(and neg (print "!("))
	(while (cdr values)
	  (ir-gen (car values) self)
	  (and (cdr (set values (cdr values)))
	       (print " "op" ")))
	(and neg (print ")"))
	(print ") ")
	(ir-gen (car values) self))
    (print "(")
    (while values
      (ir-gen (car values) self)
      (if (set values (cdr values))
	  (print " "op" ")))
    (print ")")))

(define-method ir-gen-logand <ir-gen-c> (type values)	(ir-gen-c-logical self type values "&&" ()))
(define-method ir-gen-logor  <ir-gen-c> (type values)	(ir-gen-c-logical self type values "||" 1 ))

(define-method ir-gen-seq <ir-gen-c> (bindings exprs)
  (ir-gen-c-begin self)
  (list-do name-var bindings (ir-gen-local-declaration (cdr name-var) self))
  (list-do expr exprs
    (ir-gen-c-bol self)
    (ir-gen expr self)
    (ir-gen-c-eol self))
  (ir-gen-c-end self))

(define-method ir-gen-let <ir-gen-c> (type bindings exprs)
  (and (!= IR-VOID type) (print "("))
  (ir-gen-c-begin self)
  (list-do name-var bindings (ir-gen-local-declaration (cdr name-var) self))
  (list-do expr exprs
    (ir-gen-c-bol self)
    (ir-gen expr self)
    (ir-gen-c-eol self))
  (ir-gen-c-end self)
  (and (!= IR-VOID type) (print ")")))

(define-method ir-gen-if <ir-gen-c> (type test exp alt)
  (if (= type IR-VOID)
      (let ()
	(print "if (")  (ir-gen test self)  (println ")")
	(ir-gen-c-begin self)  (ir-gen exp self)  (ir-gen-c-eol self)  (ir-gen-c-end self)
	(ir-gen-c-bol self)    (println "else")
	(ir-gen-c-begin self)  (ir-gen alt self)  (ir-gen-c-eol self)  (ir-gen-c-end self))
    (print "(")  (ir-gen test self)
    (print "?")  (ir-gen exp  self)
    (print ":")  (ir-gen alt  self)  (print ")")))

(define-method ir-gen-while <ir-gen-c> (test expr)
  (print "while (")  (ir-gen test self)  (println ")")
  (ir-gen-c-begin self)
  (ir-gen expr self)
  (ir-gen-c-eol self)
  (ir-gen-c-end self))

(define-method ir-gen-extern <ir-gen-c> (value)
  (print "dlsym(RTLD_DEFAULT, ")
  (dump (symbol->string (car (<ir-extern>-parameters value))))
  (print ")"))

(define-method ir-gen-function <ir-gen-c> (value)
  (print (ir-gen-c-function-name value)))

(define-method ir-gen-function-implementation <ir-gen-c> (value)
  (let ((name (car  (<ir-function>-parameters value)))
	(type (<ir-pointer-type>-referent (<ir-function>-type value)))
	(args (cadr (<ir-function>-parameters value)))
	(body (<ir-function>-operands value)))
    (and (= 'main name) (set *ir-gen-c-main* name))
    (or (<ir-function>-export value) (print "static "))
    (print-c-declaration (<ir-function-type>-ret-type type) (ir-gen-c-function-name value))
    (print "(")
    (let ((argn args)
	  (argt (<ir-function-type>-arg-types type)))
      (unless (= IR-VARARGS (car argt))
	(while (pair? argn)
	  (print-c-declaration (car argt) (ir-gen-c-variable-name (symbol->string (car argn))))
	  (set argt (cdr argt))
	  (and (pair? (set argn (cdr argn))) (print ", ")))))
    (println ")")
    (ir-gen-c-begin self)
    ;;(ir-scope-do var (<ir-function>-scope value) (ir-gen-local-declaration var self))
    (list-do insn body
      (ir-gen-c-bol self)
      (ir-gen insn self)
      (ir-gen-c-eol self))
    (ir-gen-c-end self)))

(define-method ir-gen-call <ir-gen-c> (value)
  (print "(")
  (ir-gen (car (<ir-call>-operands value))self)
  (print ")(")
  (let ((args (cdr (<ir-call>-operands value))))
    (while (pair? args)
      (ir-gen (car args) self)
      (and (pair? (set args (cdr args)))
	   (print ", "))))
  (print ")"))

(define-method ir-gen-return <ir-gen-c> (value)
  (print "return ")
  (ir-gen (car (<ir-return>-operands value)) self))

(define-method ir-gen-header <ir-gen-c> ()
  (println "#include <stdint.h>")
  (println "#define __USE_GNU")
  (println "#include <dlfcn.h>"))

(define-method ir-gen-preamble <ir-gen-c> ()
  (cond
    (*ir-gen-c-main*	(println "int main(int argc, char **argv)")	(ir-gen-c-begin self))
    (*ir-gen-c-init*	(println "static void _init(void)")		(ir-gen-c-begin self))))

(define-method ir-gen-initialisation <ir-gen-c> (value)
  (if *ir-gen-c-main*
      (let ()
	(ir-gen-c-bol self)
	(ir-gen value self)
	(ir-gen-c-eol self))
    (let* ((setter (car (<ir-define>-operands value)))
	   (var    (<ir-set-var>-parameters setter))
	   (name   (<ir-global>-name var))
	   (type   (<ir-global>-type var))
	   (init   (car (<ir-set-var>-operands setter)))
	   (kind   (type-of init)))
      (cond
	((= kind <ir-extern>)	(print "extern ") (print-c-declaration (<ir-pointer-type>-referent type) (symbol->string name)) (println ";")
				(print-c-declaration type (ir-gen-c-variable-name name))
				(println " = "name";"))
	((= kind <ir-function>)	(print-c-declaration type (ir-gen-c-variable-name name))
				(print " = ")
				(print (ir-gen-c-function-name init))
				(println ";"))
	(else			(error "cannot initialise: "name" with: "value)))
;    (println ";")))
      )))

(define-method ir-gen-postamble <ir-gen-c> ()
  (cond
    (*ir-gen-c-main*	(ir-gen-c-bol self)    (print (ir-gen-c-function-name "main")"(argc, argv)")	(ir-gen-c-eol self)
			(ir-gen-c-bol self)    (print "return 0")					(ir-gen-c-eol self)
			(ir-gen-c-end self))
    (*ir-gen-c-init*	(ir-gen-c-end self))))
