(require "osdefs.k")
(require "dlopen.k")
(require "define-data.k")

(init-dlopen)

(require "libsdl2.osdefs.k")

(define-data <sdl-event>
  (type		int32)
  (padding1	int32)
  (padding2	int32)
  (padding3	int32)
  (padding4	int32)
  (padding5	int32)
  (padding6	int32)
  (padding7	int32)
  (padding8	int32)
  (padding9	int32)
  (padding10	int32)
  (padding11	int32)
  (padding12	int32)
  (padding13	int32))

(define-data <sdl-keyboard-event>
  (type		int32)
  (timestamp	int32)
  (windowID 	int32)
  (state    	int8)
  (repeat   	int8)
  (padding2 	int8)
  (padding3 	int8)
  (scancode	int32)
  (sym		int32)
  (mod		int16)
  (padding1	int16)
  (padding2	int32))

(define-data <sdl-mouse-button-event>
  (type		int32)
  (timestamp	int32)
  (windowID	int32)
  (which	int32)
  (button	int8)
  (state	int8)
  (padding1	int8)
  (padding2	int8)
  (x		int32)
  (y		int32))

(define-data <sdl-mouse-motion-event>
  (type		int32)
  (timestamp	int32)
  (windowID	int32)
  (which	int32)
  (state	int32)
  (x		int32)
  (y		int32)
  (xrel		int32)
  (yrel		int32))

(let ((lib "libSDL2"))
  (define sdl-init				(dlextern lib "SDL_Init"		"i"))
  (define sdl-create-window			(dlextern lib "SDL_CreateWindow"	"siiiii"))
  (define sdl-create-renderer			(dlextern lib "SDL_CreateRenderer"	"pii"))
  (define sdl-set-render-draw-color		(dlextern lib "SDL_SetRenderDrawColor"	"piiii"))
  (define sdl-render-clear			(dlextern lib "SDL_RenderClear"		"p"))
  (define sdl-render-present			(dlextern lib "SDL_RenderPresent"	"p"))
  (define sdl-poll-event			(dlextern lib "SDL_PollEvent"		"p"))
  (define sdl-delay				(dlextern lib "SDL_Delay"		"i"))
  (define sdl-quit				(dlextern lib "SDL_Quit"		"")))

(let ((lib "libSDL2_gfx"))
  (define sdl-gfx-line-color			(dlextern lib "lineColor"		"piiiii"))
  (define sdl-gfx-rounded-rectangle-color	(dlextern lib "roundedRectangleColor"	"piiiiii"))
  (define sdl-gfx-set-font			(dlextern lib "gfxPrimitivesSetFont"	"pii"))
  (define sdl-gfx-string-color			(dlextern lib "stringColor"		"piisi")))

(define-function make-font-bitmap (bytes)
  (let* ((nbytes (list-length bytes))
	 (bits   (data nbytes)))
    (for (i 0 nbytes)
      (set-byte-at bits i (car bytes))
      (set bytes (cdr bytes)))
    bits))

(define-structure <font> (width height descent bitmap))

(define-form define-font (name width height descent . bytes)
  `(define ,(concat-symbol 'font- (string->symbol name))
     (new <font> ,width ,height ,descent (make-font-bitmap ',bytes))))

(require "fonts.k")

(sdl-init SDL_INIT_VIDEO)

(define-function set-font (font) (sdl-gfx-set-font (<font>-bitmap font) (<font>-width font) (<font>-height font)))

(let* ((window (sdl-create-window "Hello, world!" 100 100 640 480 SDL_WINDOW_SHOWN))
       (render (sdl-create-renderer window -1 0)))
  (sdl-set-render-draw-color render 255 255 240 255)
  (sdl-render-clear render)
  (sdl-gfx-rounded-rectangle-color render 100 100 540 380 16 0xff0000ff)
  (set-font font-profont29)
  (sdl-gfx-string-color render 125 220 "press ESCAPE to close me" 0xff000000)
  (sdl-render-present render)
  (let ((evt (new-<sdl-event>))
	(x   ())
	(y   ()))
    (while 1
      (if (!= 0 (sdl-poll-event (address-of evt)))
	  (let ((type (<sdl-event>-type evt)))
	    (cond
	      ((= type SDL_KEYUP)
	       (when (= SDLK_ESCAPE (<sdl-keyboard-event>-sym evt))
		 (sdl-quit)
		 (exit 0)))
	      ((= type SDL_MOUSEBUTTONDOWN)
	       (set x (<sdl-mouse-button-event>-x evt))
	       (set y (<sdl-mouse-button-event>-y evt)))
	      ((= type SDL_MOUSEMOTION)
	       (when x
		 (let ((xx (<sdl-mouse-motion-event>-x evt))
		       (yy (<sdl-mouse-motion-event>-y evt)))
		   (sdl-gfx-line-color render x y xx yy 0xff00ff00)
		   (sdl-render-present render)
		   (set x xx)
		   (set y yy))))
	      ((= type SDL_MOUSEBUTTONUP)
	       (set x (set y ())))))
	(sdl-delay 50)))))
