(require "osdefs.k")

(define-function data-field-size (field)
  (let* ((type (cadr field)))
    (cond
      ((= type 'char)		sizeof-char)
      ((= type 'short)		sizeof-short)
      ((= type 'wchar)		sizeof-wchar)
      ((= type 'int)		sizeof-int)
      ((= type 'int32)		sizeof-int32)
      ((= type 'int64)		sizeof-int64)
      ((= type 'long)		sizeof-long)
      ((= type 'longlong)	sizeof-longlong)
      ((= type 'float)		sizeof-float)
      ((= type 'double)		sizeof-double)
      ((= type 'longdouble)	sizeof-longdouble)
      ((= type 'pointer)	sizeof-pointer)
      (else			(error "unknown data field type: "type)))))

(define-function data-field-alignment (field)
  (let* ((type (cadr field)))
    (cond
      ((= type 'char)		alignof-char)
      ((= type 'short)		alignof-short)
      ((= type 'wchar)		alignof-wchar)
      ((= type 'int)		alignof-int)
      ((= type 'int32)		alignof-int32)
      ((= type 'int64)		alignof-int64)
      ((= type 'long)		alignof-long)
      ((= type 'longlong)	alignof-longlong)
      ((= type 'float)		alignof-float)
      ((= type 'double)		alignof-double)
      ((= type 'longdouble)	alignof-longdouble)
      ((= type 'pointer)	alignof-pointer)
      (else			(error "unknown data field type: "type)))))

(define-function define-data-size (fields)
  (if (pair? fields)
      (+ (data-field-size (car fields))
	 (define-data-size (cdr fields)))
    0))

(define-function make-data-accessors (prefix offset fields)
  (and (pair? fields)
       (let* ((field  	 (car  fields))
	      (name   	 (car  field))
	      (type   	 (cadr field))
	      (size   	 (data-field-size field))
	      (alignment (data-field-alignment field))
	      (foff	 (align offset alignment)))
	 (cons `(define-form ,(concat-symbol prefix name) (self) (list ',(concat-symbol type '-at) self ,foff 1))
	       (make-data-accessors prefix (+ foff size) (cdr fields))))))

(define-form define-data (name . fields)
  (let ((type (%allocate-type name))
	(size (define-data-size fields)))
    (set-array-at %structure-sizes type size)
     `(let ()
	(define ,name ,type)
	(define-function ,(concat-symbol 'new- name) () (allocate-atomic ,type ,size))
	,@(make-data-accessors (concat-symbol name '-) 0 fields)
	)))
