(require "osdefs.k")
(require "libgezira.k")
(require "libglfw.k")
(require "libglu.k")
(require "libgl.k")
(require "gl-texbuf.k")
(require "matrix.k")
(require "random.k")
(require "snowflake.k")

(define window-width	600)
(define window-height	600)
(define n-flakes	500)
(define n-threads	1)
(define mem-size	(* 1000000 n-threads))

(define flake-alpha	0.7)
(define flake-red	0.8)
(define flake-green	0.9)
(define flake-blue	1.0)

(define zoom		1.0)

(define-structure <snowflake> (x y dy scale angle dangle))

(define-function snowflake-update (self)
  (with-instance-accessors <snowflake>
    (incr self.y self.dy)
    (incr self.angle self.dangle)
    (and (> self.y (+ window-height 10.0))
	 (set self.y -10.0))))

(define-function snowflake-offscreen (self)
  (with-instance-accessors <snowflake>
    (let ((w (long->double window-width))
	  (h (long->double window-height)))
      (let ((dx (/ w (fabs (- self.x (/ w 2.0)))))
	    (dy (/ h (fabs (- self.y (/ h 2.0))))))
	(or (> zoom dx) (> zoom dy))))))

(define-function snowflake-render (self image process)
  (unless (snowflake-offscreen self)
    (with-instance-accessors <snowflake>
      (let ((m (matrix)))
	(set m (matrix-translate m (/ window-width 2.0) (/ window-height 2.0)))
	(set m (matrix-scale	 m zoom zoom))
	(set m (matrix-translate m (- (/ window-width 2.0)) (- (/ window-height 2.0))))
	(set m (matrix-translate m self.x self.y))
	(set m (matrix-rotate    m self.angle))
	(set m (matrix-scale     m self.scale self.scale))
	(let ((pipeline (nile_Process_pipe
			 (gezira_TransformBeziers	process (matrix-a m) (matrix-b m) (matrix-c m) (matrix-d m) (matrix-e m) (matrix-f m))
			 (gezira_ClipBeziers		process 0.0 0.0 (long->double window-width) (long->double window-height))
			 (gezira_Rasterize		process)
			 (gezira_CompositeUniformColorOverImage_ARGB32 process image flake-alpha flake-blue flake-green flake-red)
			 0)))
	  (nile_Process_feed pipeline snowflake_path snowflake_path_n))))))

(define-function clear (image process a r g b)
  (nile_Process_feed
   (nile_Process_pipe
     (gezira_RectangleSpans process 0.0 0.0 (long->double (<gezira-image>-width image)) (long->double (<gezira-image>-height image)))
     (gezira_CompositeUniformColorOverImage_ARGB32 process image a r g b)
     0)
   0 0))

(define-function display (texbuf)
  (glClear GL_COLOR_BUFFER_BIT)
  (glLoadIdentity)
  (gl-render texbuf))

(define-function *main* ()
  (init-dlopen)
  (init-libgezira)
  (init-libglfw)
  (init-libglu)
  (init-libgl)
  (glfwInit)
  (let ((w window-width) (h window-height))
    (glfwOpenWindow w h 8 8 8 8 0 0 GLFW_WINDOW)
    (glfwSetWindowTitle "Maru :: Gezira :: Snow")
    (let* ((texbuf  (texbuf window-width window-height 0 0))
	   (image   (new-<gezira-image>))
	   (memory  (data mem-size))
	   (process (nile_startup memory mem-size n-threads))
	   (flakes  (array)))
      (gezira_Image_init image (<texbuf>-bits texbuf) window-width window-height (<texbuf>-stride texbuf))
      (for (i 0 n-flakes)
	(set-array-at flakes i (make <snowflake>
				     (x	    (random 0 w))      (y     (random 0 h))	 (dy	 (random 0.5 3.0))
				     (scale (random 0.2 0.7))  (angle (random 0.0 0.4))  (dangle (random -0.1 0.1)))))
      (let ((running 1))
	(while running
	  (clear image process 1.0 0.0 0.0 0.0)
	  (array-do flake flakes
	    (snowflake-render flake image process)
	    (snowflake-update flake))
	  ;;(nile_sync process)
	  (display texbuf)
	  (glfwSwapBuffers)
	  (glfwSleep 0.025)
	  (set running (and (= 0 (glfwGetKey GLFW_KEY_ESC))
			    (= 1 (glfwGetWindowParam GLFW_OPENED))))))
      (nile_sync process)
      (nile_shutdown process)
      (glfwTerminate)
      (exit 0))))

(*main*)
